# Generated by Django 2.0.9 on 2019-01-09 04:33

import bgp.fields
from django.db import migrations, models
import django.db.models.deletion
import ipam.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0063_device_local_context_data'),
        ('taggit', '0002_auto_20150616_2121'),
        ('ipam', '0023_change_logging'),
    ]

    operations = [
        migrations.CreateModel(
            name='BGPRoutingPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Neighbor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'iBGP'), (1, 'eBGP'), (2, 'MPBGP')])),
                ('family', models.PositiveSmallIntegerField(choices=[(4, 'IPv4'), (6, 'IPv6')])),
                ('neighbor_address', ipam.fields.IPAddressField(help_text='IPv4 or IPv6 neighbor address (without mask)')),
                ('router_id', ipam.fields.IPAddressField(help_text='IPv4 or IPv6 router-id')),
                ('remote_router_id', ipam.fields.IPAddressField(blank=True, help_text='IPv4 or IPv6 router-id')),
                ('local_asn', bgp.fields.ASNField(blank=True, null=True, verbose_name='LocalASN')),
                ('remote_asn', bgp.fields.ASNField(blank=True, null=True, verbose_name='RemoteASN')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('import_policy', models.CharField(blank=True, max_length=500)),
                ('export_policy', models.CharField(blank=True, max_length=500)),
                ('interface', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vrfs', to='dcim.Interface')),
            ],
            options={
                'verbose_name': 'IP address',
                'verbose_name_plural': 'IP addresses',
                'ordering': ['remote_asn', 'local_asn', 'neighbor_address', 'interface'],
            },
        ),
        migrations.CreateModel(
            name='NeighborState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('state', models.PositiveSmallIntegerField(choices=[(0, 'IDLE'), (1, 'CONNECT'), (2, 'ACTIVE'), (3, 'OPEN_CONFIRM'), (4, 'ESTABLISHED')])),
                ('advertised_routes', models.PositiveIntegerField(default=0, help_text='The neighbor bgp advertised routes', verbose_name='ReceivedRoute')),
                ('received_routes', models.PositiveIntegerField(default=0, help_text='The neighbor bgp received routes', verbose_name='ReceivedRoute')),
                ('accepted_receive_routes', models.PositiveIntegerField(default=0, help_text='The neighbor bgp received routes', verbose_name='ReceivedRoute')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='neighbor',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vrfs', to='bgp.NeighborState'),
        ),
        migrations.AddField(
            model_name='neighbor',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='neighbor',
            name='vrf',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vrfs', to='ipam.VRF'),
        ),
    ]
